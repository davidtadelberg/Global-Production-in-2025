Reduce('+', fit$analyses) / length(fit$analyses)
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(results)
str(results$analyses)
lapply(results$analyses, function(el) {el[,-1]})
debugSource('~/Documents/CS50/FinalProject/R/main.R')
results
debugSource('~/Documents/CS50/FinalProject/R/main.R')
country
results
country
debugSource('~/Documents/CS50/FinalProject/R/main.R')
country
country
results$analyses[[1]]
temp = results$analyses[[1]]
temp
temp$country
str(temp)
cbind(country, results)
expression(1+2)
x = expression(1+2)
eval(x)
x
3 * x
y = expression(3*x)
eval(y)
mi_data = mice(processed_data, print=FALSE, m = 30, seed=50)
model_expression <- expression(exp(predict(lm(log(ten_year_gdp_growth) ~
a
init()
source("main.R")
predicted = exp(predict(lm(log(ten_year_gdp_growth) ~
q
)
a;dsfksadf
source("main.R")
source("main.R")
c(2,3) + 1
source("main.R")
source("main.R")
get_codes(db, selector)
dbs = c("UGID", "ODA")
selectors = c(un_select, imf_select)
init(reload=FALSE)
dbs = c("UGID", "ODA")
selectors = c(un_select, imf_select)
init(reload=TRUE)
settings <- list(r_init=TRUE, quandl_init=FALSE)
settings
settings$r_init
x = "r_init"
settings$x
settings$`x`
x = expression(x)
x
settings$x
settings$(eval(x))
settings
settings[r_init]
settings[[1]]
names(settings)
setttings[["r_init"]]
settings[["r_init"]]
list("hello", 2)
options = list(UGID=not_yet_defined)
debugSource('~/Documents/CS50/FinalProject/R/main.R')
Sys.time()
Sys.date()
Sys.Date()
paste("hello,", "world", "today", sep=" ")
paste(c("UGID", "ODA"), c("file1", "file2"))
paste(c("UGID", "ODA"), "file")
paste(list("UGID", "ODA"), "file")
paste(list(ugid="UGID", "ODA"), "file")
res = paste(list(ugid="UGID", "ODA"), "file")
res
res$ugid
list(res)
as.list(res)
as.list(res, all.names=TRUE)
names(res) = c("db1", "db2")
as.list(res, all.names=TRUE)
names(res)
names(res) <- c("db1", "db2")
x = names(res) <- c("db1", "db2")
x
res
setNames( 1:3, c("foo", "bar", "baz") )
res = setNames( 1:3, c("foo", "bar", "baz") )
res
setNames(as.list(paste(c("UGID", "ODA"), "wanted_data.csv")), c("UGID", "ODA"))
x = list(dbs=c("hello", "world"), db2 = x$dbs)
x = list(dbs=c("hello", "world"), db2 = x)
x
y
z
z = list(dbs=c("hello","world"),db2=z[["dbs"]])
z = list(dbs=c("hello","world"),db2=expression(z[["dbs"]]))
z
z = list(dbs=c("hello","world"),db2=eval(expression(z[["dbs"]])))
z
z = list(dbs=c("hello","world"),db2=z[["dbs"]]))
z = list(dbs=c("hello","world"),db2=z[["dbs"]])
z
a
clear(z)
rm(z0)
rm(z)
z = list(dbs=c("hello","world"),db2=z[["dbs"]])
z
source('~/Documents/CS50/FinalProject/R/main.R')
source('~/Documents/CS50/FinalProject/R/main.R')
source("main.R")
source("main.R")
print(setup)
debugSource('~/Documents/CS50/FinalProject/R/main.R')
processed_data
options$make_predictions$print
debugSource('~/Documents/CS50/FinalProject/R/main.R')
source("main.R")
source("main.R")
debugSource('~/Documents/CS50/FinalProject/R/main.R')
mylist = list(population_frame, investment_frame, per_capita_frame, inflation_frame, historic_gdp_frame, current_gdp_frame)
Reduce(merge, mylist)
source('~/Documents/CS50/FinalProject/R/main.R')
source('~/Documents/CS50/FinalProject/R/main.R')
source('~/Documents/CS50/FinalProject/R/main.R')
options = get_options()
options
options$get_codes
options$reload$get_codes$ODA=TRUE
myoptions=options
source("main.R")
source("main.R")
myoptions
myoptions$reload
oda_codes = get_codes(options, "ODA")
ada_codes
oda_codes
str(oda_codes)
oda_codes = get_codes(options, c("ODA", "UGID"))
oda_codes = get_wanted_api_codes(options, c("ODA", "UGID"))
oda_codes = get_codes(options, "ODA")
oda_codes = oda_codes[[1]]
oda_codes
source('~/Documents/CS50/FinalProject/R/main.R')
get_codes(options, "UGID")
source("main.R")
get_codes(options, "UGID")
get_codes(options, "ODA")
get_codes(options, "ODA")
get_codes(options, "ODA")
oda_codes = get_codes(options, "ODA")
str(oda_codes)
oda_codes[1]
Quandl(oda_codes[1], type="raw", collapse="annual")
Quandl(oda_codes, type="raw", collapse="annual")
oda_codes = get_codes(options, "ODA")
r_init(get_options())
oda_codes = get_codes(options, "ODA")
source("main.R")
oda_codes = get_codes(options, "ODA")
str(oda_codes)
grep(oda_codes, "*PPPGDP")
grep("*PPPGDP", oda_codes)
head(oda_codes)
grep("*USA*", oda_codes)
oda_codes[grep("*USA*", oda_codes)]
oda_codes[grep("*USA", oda_codes)]
all_codes = quandl_all_db_codes(myoptions, "ODA")
all_codes
grep("*GDPPP", all_codes)
Quandl("ODA/USA_PPPGDP")
grep("*PPPGDP", all_codes)
all_codes["ODA/USA_PPPGDP"]
all_codes["ODA/USA_PPPGDP"]
all_codes[all_codes == "ODA/USA_PPPGDP"]
grep("*PPPGDP", all_codes)
grep(".PPPGDP", all_codes)
grep(".", all_codes)
grep(".*", all_codes)
all_codes
grep(".*NGDP_D")
grep(".*NGDP_D", all_codes)
grep("PPPGDP", all_codes)
grep("NID_NGDP", all_codes)
grep("*PPPGDP|NGDP_D", all_codes)
debugSource('~/Documents/CS50/FinalProject/R/main.R')
head(codes)
imf_select(all_codes)
print(pattern)
grep(pattern, codes)
grep(pattern, codes)
get_wanted_api_codes(myoptions, "ODA")
codes.df$Code
options$selectors[[db]](codes.df$Code)
options$selectors[[db]]
print(pattern)
grep(pattern, codes)
print(pattern)
grep("*PPPGDP|NGDP_D|NID_NGDP|NGDPD|LP", codes) == grep("* PPPGDP|NGDP_D|NID_NGDP|NGDPD|LP", codes)
length(grep("*PPPGDP|NGDP_D|NID_NGDP|NGDPD|LP", codes)) == length(grep("* PPPGDP|NGDP_D|NID_NGDP|NGDPD|LP", codes))
length(grep("*PPPGDP|NGDP_D|NID_NGDP|NGDPD|LP", codes))
length(grep("* PPPGDP|NGDP_D|NID_NGDP|NGDPD|LP", codes))
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
options
options$reload
options$reload$get_codes
get_codes(options, "ODA")
codes_path
wanted_codes
grep("*GDPPP", wanted_codes)
debugSource('~/Documents/CS50/FinalProject/R/main.R')
get_codes(options, "ODA")
codes_path
options$reload$get_codes[[db]]
codes.df$Code
grep("*PPPGDP", codes.df$Code)
options$selectors[[db]]
debugSource('~/Documents/CS50/FinalProject/R/main.R')
options
get_codes(get_options(), "ODA")
codes_path
options$reload$get_codes[[db]]
options$selectors$ODA
wanted_codes
grep("*PPPGDP", wanted_codes[[1]])
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
length(countries)
length(countries)
get_imf_countries(recents)
length(get_imf_countries(recents))
length(get_imf_countries(pasts))
intersect(get_imf_countries(recents))
intersect(get_imf_countries(recents), get_imf_countries(pasts))
length(intersect(get_imf_countries(recents), get_imf_countries(pasts)))
recents
recents[get_imf_countries(recents)==""]
imf_data[get_imf_countries(recents)==""]
length(imf_data[get_imf_countries(recents)==""])
get_imf_countries(recents)==""
(get_imf_countries(recents)=="")==TRUE
problems = imf_data[(get_imf_countries(recents)=="")]
problems
str(problems)
problems[1]
problems[2]
problems[3]
modimf = imf_data[,"*Country GDP based on PPP Valuation, USD Billions"]
modimf = imf_data[,grep("*Country GDP based on PPP Valuation, USD Billions", colnames(imf_data)]
modimf = imf_data[,grep("*Country GDP based on PPP Valuation, USD Billions", colnames(imf_data))]
problems = modimf[(get_imf_countries(recents)=="")]
problems
modimf
problems = modimf[(get_imf_countries(recents)=="")]
modimf
problems
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
file.exists(codes_path)
codes_path
debugSource('~/Documents/CS50/FinalProject/R/main.R')
downloaded_data <<- my_data
source("main.R")
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
gdp_growth
get_imf_countries(gdp_growth)
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
get_imf_countries(gdp_growth)
get_imf_countries(gdp_growth)
imf_data[dates <= options$dates$most_recent_data & dates >= options$dates$max_testing_calibration, ]
str(imf_data[dates <= options$dates$most_recent_data & dates >= options$dates$max_testing_calibration, ])
gdp_growth
str(gdp_growth)
debugSource('~/Documents/CS50/FinalProject/R/main.R')
head(gdp_growth)
gdp_growth
debugSource('~/Documents/CS50/FinalProject/R/main.R')
head(gdp_growth)
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
processed_data
processed_data[1]
str(processed_data[1])
debugSource('~/Documents/CS50/FinalProject/R/main.R')
processed_data[1]
processed_data[2]
debugSource('~/Documents/CS50/FinalProject/R/main.R')
population_frame
historic_gdp_frame
merge(population_frame, investment_frame)
Reduce(merge, frames)
gdp_growth_rate
processed_data
processed_data[1]
processed_data[2]
gdp_growth
str(gdp_growth)
current_gdp_frame
str(gdp_frame)
str(current_gdp_frame)
processed_data[1]
merge(processed_data[1], current_gdp_frame)
str(merge(processed_data[1], current_gdp_frame))
processed_data
names(processed_data[1])
colnames(processed_data[1])
processed_data[1]
debugSource('~/Documents/CS50/FinalProject/R/main.R')
processed_data[1]
debugSource('~/Documents/CS50/FinalProject/R/main.R')
nc
processed_data
processed_data
class(processed_data[1])
processed_data[[1]]
debugSource('~/Documents/CS50/FinalProject/R/main.R')
processed_data[[1]]
str(processed_data[[1]])
str(processed_data[[2]])
debugSource('~/Documents/CS50/FinalProject/R/main.R')
processed_data
processed_data[,1]
str(processed_data[,1])
processed_data
str(processed_data)
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(processed_data)
debugSource('~/Documents/CS50/FinalProject/R/main.R')
processed_data
str(processed_data)
processed_data[[1]]
str(processed_data[[1]])
str(processed_data[[1]])
str(processed_data[[2]])
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(current_gdp_frame)
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(processed_data[[1]])
str(processed_data[[1]])
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(processed_data)
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(processed_data)
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(processed_data[[1]])
colnames(processed_data[[1]])
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
colnames(processed_data[[1]])[-1]
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(processed_data[[1]])
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
merge(processed_data[[1]], processed_data[[2]])
str(merge(processed_data[[1]], processed_data[[2]]))
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(merge(processed_data[[1]], processed_data[[2]]))
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(merge(processed_data[[1]], processed_data[[2]]))
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
colnames(mi_data)
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(test)
class(test)
class(predictions)
class(predictions)
class(test)
list(predictions, test)
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(predictions)
predictions$test
predictions$predictions
class(predictions$test)
class(predictions$predictions)
str(predictions$predictions)
predictions$predictions
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(predictions)
predictions$analyses[[1]]
predictions$analyses[[1]]$country
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(el)
str(el)
str(country)
str(results)
str(country)
str(results)
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(country)
el$analyses
el$analyses[[1]][,-1]
el$analyses[[1]][,2:length(colnames(el$analyses[[1]]))]
el$analyses[[1]][,2]
test$analyses[[1]][,2]
test$analyses[[1]][-1]
predictions$analyses[[1]][-1]
test$analyses[[1]][-1]
predictions$analyses[[1]][-1]
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(results)
str(predictions)
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(predictions)
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
predictions$predictions
debugSource('~/Documents/CS50/FinalProject/R/main.R')
predictions$predictions
predictions$predictions[,2]
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(growth_rate)
str(growth_rate)
str(growth_rate)
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(data[[2]])
str(processed_data[[1]])
str(processed_data[[2]])
str(current_gdp_frame)
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(frames)
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(population_frame)
str(investment_frame)
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(countries)
str(modified_data)
grep("*Total Investment", modified_data)
grep("*Total Investment, % of GDP", modified_data)
grep(modified_data, "*Total Investment")
grep(modified_data, "*Total Investment, % of GDP")
modified_data[,grep("*Total Investment, % of GDP", colnames(modified_data)]
modified_data[,grep("*Total Investment, % of GDP", colnames(modified_data))]
str(modified_data[,grep("*Total Investment, % of GDP", colnames(modified_data))])
str(modified_data[,grep("*Population, Millions", colnames(modified_data))])
str(investment_frame)
str(population_frame)
str(per_capita_frame)
str(inflation_frame)
str(historic_gdp_frame)
mymerged = Reduce(merge, frames)
mymerged = Reduce(merge, frames)
str(mymerged)
mymerged = Reduce(function(x,y) merge(x,y, all=TRUE), frames)
str(mymerged)
mymerged$median_population_growth
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(investment_frame)
str(population_frame)
str(investment_frame)
str(per_capita_frame)
str(processed_data[[1]])
str(processed_data[[2]])
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(processed_data)
head(processed_data)
str(predictions)
head(predictions)
source("main.R")
source("main.R")
debugSource('~/Documents/CS50/FinalProject/R/main.R')
str(log_gdppc)
median(log_gdppc)
median(log_gdppc, na.rm=TRUE)
log_gdppc = log_gdppc - median(log_gdppc, na.rm=TRUE)
log_gdppc
debugSource('~/Documents/CS50/FinalProject/R/main.R')
debugSource('~/Documents/CS50/FinalProject/R/main.R')
source("main.R")
source("main.R")
source("main.R")
bit64
bit64
bit64::abs.integer64()
rio
source('~/Documents/CS50/FinalProject/R/main.R')
require("bit64", character.only=TRUE)
source("main.R")
lm
lm
class(data.frame())
